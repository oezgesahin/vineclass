% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/copula_data.R
\name{get_u_data_dens}
\alias{get_u_data_dens}
\title{Get copula data and densities}
\usage{
get_u_data_dens(learn, test = NULL, valid = NULL, total_cl, var_types)
}
\arguments{
\item{learn}{A matrix containing learning data on the x-scale. The last column
must contain class labels (1 to total_cl).}

\item{test}{Optional matrix containing test data on the x-scale. The last column must
contain class labels (1 to total_cl). If NULL, test data is not processed.}

\item{valid}{Optional validation matrix on the x-scale. The last column must
contain class labels (1 to total_cl). If NULL, validation data is not processed.}

\item{total_cl}{A positive integer specifying the total number of classes in
the data.}

\item{var_types}{A character vector specifying variable types for each feature
("c" for continuous, "d" for discrete).}
}
\value{
A list containing:
\itemize{
\item \code{train_u}: Learning set on the u-scale (list of matrices by class).
\item \code{dmar_train}: Marginal densities of the learning set (list of matrices by class).
\item \code{test_u}: Test set on the u-scale (optional; list of matrices by class).
\item \code{dmar_test}: Marginal densities of the test set (optional; list of matrices by class).
\item \code{valid_u}: Validation set on the u-scale (optional; list of matrices by class).
\item \code{dmar_valid}: Marginal densities of the validation set (optional; list of matrices by class).
\item \code{margins}: List of fitted kernel density models for each class and variable.
}
}
\description{
Converts data into u-scale using non-parametric kernel density
estimation (unbounded for continuous variables) based on the learning set.
Computes marginal densities for learning, and optionally validation and test sets.
}
\examples{
# Simulate data from two classes
set.seed(1)
df1 <- matrix(rnorm(900), 300, 3) # Class 1 features
df2 <- matrix(rnorm(900, 2, 2), 300, 3) # Class 2 features

# Assign class labels
df1 <- cbind(df1, class = 1)
df2 <- cbind(df2, class = 2)

# Combine into a single dataset
data <- rbind(df1, df2)

# Split data into training (60\%), validation (20\%), and test (20\%) sets
train_indices <- 1:360
valid_indices <- 361:480
test_indices <- 481:600

df_train <- data[train_indices, ]
df_valid <- data[valid_indices, ]
df_test <- data[test_indices, ]

# Apply the function with all sets
copuladata <- get_u_data_dens(
  learn = df_train,
  test = df_test,
  valid = df_valid,
  total_cl = 2,
  var_types = c("c", "c", "c")
)

# Access copula data for training set
copuladata_train <- copuladata$train_u
copuladata_train_cl1var1 <- copuladata_train[[1]][, 1] # First class, first variable

# Access copula data for test set
copuladata_test <- copuladata$test_u
copuladata_test_cl1var1 <- copuladata_test[[1]][, 1] # First class, first variable

# Access copula data for validation set
copuladata_valid <- copuladata$valid_u
copuladata_valid_cl1var1 <- copuladata_valid[[1]][, 1] # First class, first variable

# Access marginal densities of training set
univ_kde_train <- copuladata$dmar_train
univ_kde_train_cl1var1 <- univ_kde_train[[1]][, 1] # First class, first variable

# Access fitted kde1d objects
fitted_kdes <- copuladata$margins
fitted_kdes_cl1var1 <- fitted_kdes[[1]][[1]] # First class, first variable

}
